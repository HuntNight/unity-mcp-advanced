/**
 * Unity Bridge MCP Module - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç
 * 
 * –ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * ‚Ä¢ Unity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ messages
 * ‚Ä¢ JS –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
 */

import axios from 'axios';

const UNITY_BASE_URL = 'http://localhost:7777';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Unity messages –≤ MCP —Ñ–æ—Ä–º–∞—Ç
 */
function convertToMCPResponse(unityResponse) {
  // –ù–æ–≤–∞—è Unity –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { messages: [...] }
  if (unityResponse.messages && Array.isArray(unityResponse.messages)) {
    const content = [];
    
    for (const msg of unityResponse.messages) {
      if (msg.type === 'text') {
        content.push({
          type: 'text',
          text: msg.content
        });
      } else if (msg.type === 'image') {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (msg.text) {
          content.push({
            type: 'text', 
            text: msg.text
              });
            }
        // –ó–∞—Ç–µ–º —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content.push({
          type: 'image',
          data: msg.content,
          mimeType: 'image/png'
        });
      }
    }
    
    return { content };
  }
  
  // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity API
  return convertLegacyResponse(unityResponse);
    }

/**
 * Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
function convertLegacyResponse(unityData) {
  const content = [];
        
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (unityData.message) {
    content.push({
      type: 'text',
      text: unityData.message
    });
  }
  
  // –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (unityData.data && unityData.data !== unityData.message) {
    content.push({
      type: 'text', 
      text: unityData.data
    });
  }
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  if (unityData.image) {
    content.push({
      type: 'text',
      text: 'Unity Screenshot'
    });
    content.push({
      type: 'image',
      data: unityData.image,
      mimeType: 'image/png'
    });
  }
  
  // –û—à–∏–±–∫–∏ Unity
  if (unityData.errors && unityData.errors.length > 0) {
    const errorText = unityData.errors.map(err => {
      if (typeof err === 'object') {
        const level = err.Level || err.level || 'Info';
        const message = err.Message || err.message || 'Unknown error';
        return `${level}: ${message}`;
      }
      return err.toString();
    }).join('\n');
    
    content.push({
      type: 'text',
      text: `Unity Logs:\n${errorText}`
    });
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  if (content.length === 0) {
    content.push({
      type: 'text',
      text: `Unity Status: ${unityData.status || 'Unknown'}`
    });
  }
  
  return { content };
  }
  
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Unity –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function handleUnityRequest(endpoint, data = {}, timeout = 10000) {
  try {
    // üöÄ –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ UTF-8
    const jsonData = JSON.stringify(data);
    
    const response = await axios.post(`${UNITY_BASE_URL}${endpoint}`, jsonData, {
      timeout,
      responseType: 'json',
      headers: { 
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json; charset=utf-8'
      }
    });
    
    return convertToMCPResponse(response.data);
  } catch (error) {
    const errorContent = [{
      type: 'text',
      text: `Unity Connection Error: ${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ Unity –∑–∞–ø—É—â–µ–Ω\n‚Ä¢ Unity Bridge Window –æ—Ç–∫—Ä—ã—Ç\n‚Ä¢ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 7777`
    }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (error.response?.data) {
      try {
        const unityError = convertToMCPResponse(error.response.data);
        errorContent.push(...unityError.content);
      } catch {
        errorContent.push({
          type: 'text',
          text: `Unity Error Details: ${JSON.stringify(error.response.data)}`
        });
      }
    }
    
    return { content: errorContent };
        }
}

// Unity –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
const unityTools = [
  {
    name: "screenshot",
    description: 'Unity Game View —Å–∫—Ä–∏–Ω—à–æ—Ç',
    inputSchema: {
      type: 'object',
      properties: {
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      return await handleUnityRequest('/api/screenshot');
    }
  },
  
  {
    name: "camera_screenshot", 
    description: 'Unity —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã',
    inputSchema: {
      type: 'object',
      properties: {
        position: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        target: {
          type: 'array', 
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–¢–æ—á–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        width: {
          type: 'number',
          default: 1920,
          minimum: 256,
          maximum: 4096,
          description: '–®–∏—Ä–∏–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        height: {
          type: 'number',
          default: 1080,
          minimum: 256,
          maximum: 4096,
          description: '–í—ã—Å–æ—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        fov: {
          type: 'number',
          default: 60,
          minimum: 10,
          maximum: 179,
          description: '–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['position', 'target']
    },
    handler: async (params) => {
      const requestBody = {
        position: params.position,
        target: params.target,
        fov: params.fov || 60,
        width: params.width || 1920,
        height: params.height || 1080
      };
      
      return await handleUnityRequest('/api/camera_screenshot', requestBody, 20000);
    }
  },

  {
    name: "scene_hierarchy",
    description: 'Unity —Å—Ü–µ–Ω–∞: –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏',
    inputSchema: {
      type: 'object',
      properties: {
        detailed: {
          type: 'boolean',
          default: false,
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: false - —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, true - + –ø–æ–∑–∏—Ü–∏—è, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–≤–æ–π—Å—Ç–≤–∞'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        detailed: params.detailed || false
      };
      
      return await handleUnityRequest('/api/scene_hierarchy', requestBody, 15000);
    }
  },

  {
    name: "execute",
    description: 'Unity C# Code Executor - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ C# –∫–æ–¥–∞ –≤ Unity Editor.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏\n‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ static)\n‚Ä¢ –ü–æ–ª–Ω—ã–π Unity API (GameObject, Transform, Material, Rigidbody, etc.)\n‚Ä¢ LINQ –æ–ø–µ—Ä–∞—Ü–∏–∏ (Where, Select, GroupBy, Sum, etc.)\n‚Ä¢ –¶–∏–∫–ª—ã, –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n‚Ä¢ Using statements, –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥\n\n‚ùå –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (JSON.NET, System.IO)\n‚Ä¢ –ê—Ç—Ä–∏–±—É—Ç—ã [Serializable], [System.Flags]\n‚Ä¢ –°–ª–æ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –≤ –∫–ª–∞—Å—Å–∞—Ö\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤: GameObject.CreatePrimitive(PrimitiveType.Cube)\n‚Ä¢ –ö–ª–∞—Å—Å—ã: public class Builder { public GameObject Create() {...} }\n‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: GameObject CreateCube(Vector3 pos) {...}\n‚Ä¢ LINQ: objects.Where(o => o.name.Contains("Test")).ToList()',
    inputSchema: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          description: 'C# –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Unity Editor'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['code']
    },
    handler: async (params) => {
        const requestBody = {
        code: params.code
      };
      
      return await handleUnityRequest('/api/execute', requestBody, 30000);
    }
  }
];

export const unityModule = {
  name: 'unity',
  description: 'Unity Bridge: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç AI ‚Üî Unity3D. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ C# –∫–æ–¥–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω—ã.',
  tools: unityTools,
  
  decorators: {
    disableSystemInfo: true,
    disableDebugLogs: true
  }
}; 