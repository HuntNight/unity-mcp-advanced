/**
 * Unity Bridge MCP Module - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç
 * 
 * –ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * ‚Ä¢ Unity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ messages
 * ‚Ä¢ JS –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
 */

import axios from 'axios';

const UNITY_BASE_URL = 'http://localhost:7777';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Unity messages –≤ MCP —Ñ–æ—Ä–º–∞—Ç
 */
function convertToMCPResponse(unityResponse) {
  const normalize = (resp) => {
    let data = resp;
    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    if (typeof data === 'string') {
      try { data = JSON.parse(data); } catch { /* ignore */ }
    }
    // –ï—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (Array.isArray(data)) {
      return { messages: data };
    }
    // –ï—Å–ª–∏ messages ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å JSON
    if (data && typeof data.messages === 'string') {
      try {
        const parsed = JSON.parse(data.messages);
        if (Array.isArray(parsed)) data.messages = parsed;
      } catch { /* ignore */ }
    }
    // –ï—Å–ª–∏ messages ‚Äî –æ–±—ä–µ–∫—Ç-—Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –º–∞—Å—Å–∏–≤
    if (data && data.messages && !Array.isArray(data.messages) && typeof data.messages === 'object') {
      data.messages = Object.values(data.messages);
    }
    return data;
  };

  const unityData = normalize(unityResponse);

  // –ù–æ–≤–∞—è Unity –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { messages: [...] }
  if (unityData && Array.isArray(unityData.messages)) {
    const content = [];
    for (const msg of unityData.messages) {
      if (msg && msg.type === 'text') {
        content.push({ type: 'text', text: String(msg.content ?? '') });
      } else if (msg && msg.type === 'image') {
        if (msg.text) {
          content.push({ type: 'text', text: String(msg.text) });
        }
        content.push({ type: 'image', data: String(msg.content ?? ''), mimeType: 'image/png' });
      }
    }
    if (content.length > 0) return { content };
  }

  // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity API
  return convertLegacyResponse(unityData ?? unityResponse);
}

/**
 * Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
function convertLegacyResponse(unityData) {
  const content = [];

  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (unityData && unityData.message) {
    content.push({ type: 'text', text: String(unityData.message) });
  }

  // –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (unityData && unityData.data && unityData.data !== unityData.message) {
    content.push({ type: 'text', text: typeof unityData.data === 'string' ? unityData.data : JSON.stringify(unityData.data) });
  }

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  if (unityData && unityData.image) {
    content.push({ type: 'text', text: 'Unity Screenshot' });
    content.push({ type: 'image', data: String(unityData.image), mimeType: 'image/png' });
  }

  // –û—à–∏–±–∫–∏ Unity
  if (unityData && unityData.errors && unityData.errors.length > 0) {
    const errorText = unityData.errors.map(err => {
      if (typeof err === 'object') {
        const level = err.Level || err.level || 'Info';
        const message = err.Message || err.message || 'Unknown error';
        return `${level}: ${message}`;
      }
      return err?.toString?.() ?? String(err);
    }).join('\n');
    content.push({ type: 'text', text: `Unity Logs:\n${errorText}` });
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
  if (content.length === 0) {
    try {
      content.push({ type: 'text', text: `Raw Unity response: ${JSON.stringify(unityData)}` });
    } catch {
      content.push({ type: 'text', text: `Raw Unity response (non-serializable)` });
    }
  }

  return { content };
}
  
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Unity –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function handleUnityRequest(endpoint, data = {}, timeout = 10000) {
  try {
    // üöÄ –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ UTF-8
    const jsonData = JSON.stringify(data);
    
    const response = await axios.post(`${UNITY_BASE_URL}${endpoint}`, jsonData, {
      timeout,
      responseType: 'json',
      headers: { 
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json; charset=utf-8'
      }
    });
    
    return convertToMCPResponse(response.data);
  } catch (error) {
    const errorContent = [{
      type: 'text',
      text: `Unity Connection Error: ${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ Unity –∑–∞–ø—É—â–µ–Ω\n‚Ä¢ Unity Bridge Window –æ—Ç–∫—Ä—ã—Ç\n‚Ä¢ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 7777`
    }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (error.response?.data) {
      try {
        const unityError = convertToMCPResponse(error.response.data);
        errorContent.push(...unityError.content);
      } catch {
        errorContent.push({
          type: 'text',
          text: `Unity Error Details: ${JSON.stringify(error.response.data)}`
        });
      }
    }
    
    return { content: errorContent };
        }
}

// Unity –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
const unityTools = [
  {
    name: "screenshot",
    description: 'Unity Game View —Å–∫—Ä–∏–Ω—à–æ—Ç',
    inputSchema: {
      type: 'object',
      properties: {
        width: {
          type: 'number',
          minimum: 256,
          maximum: 4096,
          description: '–®–∏—Ä–∏–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'
        },
        height: {
          type: 'number',
          minimum: 256,
          maximum: 4096,
          description: '–í—ã—Å–æ—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'
        },
        view_type: {
          type: 'string',
          enum: ['game', 'scene'],
          default: 'game',
          description: '–ò—Å—Ç–æ—á–Ω–∏–∫: game –∏–ª–∏ scene'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {};
      if (typeof params?.width === 'number') requestBody.width = params.width;
      if (typeof params?.height === 'number') requestBody.height = params.height;
      if (typeof params?.view_type === 'string') requestBody.view_type = params.view_type;
      return await handleUnityRequest('/api/screenshot', requestBody);
    }
  },
  
  {
    name: "camera_screenshot", 
    description: 'Unity —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã',
    inputSchema: {
      type: 'object',
      properties: {
        position: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        target: {
          type: 'array', 
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–¢–æ—á–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        width: {
          type: 'number',
          default: 1920,
          minimum: 256,
          maximum: 4096,
          description: '–®–∏—Ä–∏–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        height: {
          type: 'number',
          default: 1080,
          minimum: 256,
          maximum: 4096,
          description: '–í—ã—Å–æ—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        fov: {
          type: 'number',
          default: 60,
          minimum: 10,
          maximum: 179,
          description: '–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['position', 'target']
    },
    handler: async (params) => {
      const requestBody = {
        position: params.position,
        target: params.target,
        fov: params.fov || 60,
        width: params.width || 1920,
        height: params.height || 1080
      };
      
      return await handleUnityRequest('/api/camera_screenshot', requestBody, 20000);
    }
  },

  {
    name: "scene_hierarchy",
    description: 'Unity —Å—Ü–µ–Ω–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã –∏ –ª–∏–º–∏—Ç–æ–º. –ë–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞. –í—Å–µ–≥–¥–∞ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è. –ú–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å path (root –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç auto-path: exact | glob | regex (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –∏–º—è, id, —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–∞ 5000 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è allow_large_response).',
    inputSchema: {
      type: 'object',
      properties: {
        name_glob: { type: 'string', description: 'Glob —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏' },
        name_regex: { type: 'string', description: 'Regex (C#/.NET) —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏' },
        tag_glob: { type: 'string', description: 'Glob —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É' },
        path: { type: 'string', description: '–ü—É—Ç—å —á–µ—Ä–µ–∑ "/" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "World/City/Quarter/Car"). Auto-path: exact (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤), glob (–µ—Å–ª–∏ –µ—Å—Ç—å * ? [..]), regex (–µ—Å–ª–∏ –µ—Å—Ç—å ^ $ ( ) | { } \\). –í—Å–µ –º–∞—Ç—á–∏ ‚Äî –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É' },
        max_results: {
          type: 'number',
          default: 0,
          description: '–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)'
        },
        max_depth: {
          type: 'number',
          default: -1,
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞ (‚àí1 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)'
        },
        allow_large_response: {
          type: 'boolean',
          default: false,
          description: '–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–ø–∞—Å–Ω–æ –¥–ª—è LLM)'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        name_glob: params.name_glob,
        name_regex: params.name_regex,
        tag_glob: params.tag_glob,
        path: params.path,
        max_results: typeof params.max_results === 'number' ? params.max_results : undefined,
        max_depth: typeof params.max_depth === 'number' ? params.max_depth : undefined,
        allow_large_response: !!params.allow_large_response
      };
      
      return await handleUnityRequest('/api/scene_hierarchy', requestBody, 15000);
    }
  },

  {
    name: "execute",
    description: 'Unity C# Code Executor ‚Äî —Ä–µ–∂–∏–º: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ + —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∫–ª–∞—Å—Å–æ–≤).\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π C# –∏ —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ) ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—é—Ç—Å—è static\n‚Ä¢ –ü–æ–ª–Ω—ã–π Unity API (GameObject, Transform, Material, Rigidbody, etc.)\n‚Ä¢ LINQ, —Ü–∏–∫–ª—ã, –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ Using-–¥–∏—Ä–µ–∫—Ç–∏–≤—ã (–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ)\n\n‚ùå –ó–ê–ü–†–ï–©–ï–ù–û:\n‚Ä¢ –õ—é–±—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è class/interface/struct/enum\n‚Ä¢ namespace\n\nüí° –ü–†–ò–ú–ï–†:\nGameObject CreateCube(Vector3 p) { var go = GameObject.CreatePrimitive(PrimitiveType.Cube); go.transform.position = p; return go; }\nvar a = CreateCube(new Vector3(0,1,0));\nreturn a.name;\n',
    inputSchema: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          description: 'C# –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Unity Editor'
        },
        safe_mode: {
          type: 'boolean',
          default: true,
          description: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        },
        validate_only: {
          type: 'boolean',
          default: false,
          description: '–¢–æ–ª—å–∫–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['code']
    },
    handler: async (params) => {
        const requestBody = {
        code: params.code,
        safe_mode: params.safe_mode !== false,
        validate_only: !!params.validate_only
      };
      
      return await handleUnityRequest('/api/execute', requestBody, 30000);
    }
  }
  ,
  {
    name: "scene_grep",
    description: 'Unity —Å—Ü–µ–Ω–∞: WHERE + SELECT DSL (–≤—Å–µ–≥–¥–∞ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É).\n\nWHERE-DSL: and/or/not, —Å–∫–æ–±–∫–∏ (), —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (==,!=,>,>=,<,<=), —Å—Ç—Ä–æ–∫–∏: contains, startswith, endswith, matches (regex), hasComp(Type). –ü—É—Ç–∏: name, id, path, active, tag, layer, GameObject.*, Transform.*, Camera.*, Light.*, Rigidbody.*, –∞ —Ç–∞–∫–∂–µ <Component>.<property> –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤: materials[0].name.\n\nSELECT-DSL: —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏–ª–∏ –∞–ª–∏–∞—Å–æ–≤: ["GameObject.name", "Transform.position", "pos = Transform.position", "materials[0].name"].\n\n–í–∞–∂–Ω–æ: –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ name_glob="Prefix*". –í—ã–∑–æ–≤ startswith(GameObject.name, "Prefix") –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â—ë–Ω –≤ name_glob –∏ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ WHERE –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: "‚Ä¢ <–ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É> - id:<InstanceId>", –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è. –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–º–µ—á–∞—é—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–∞ 5000 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è allow_large_response). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç name_glob/tag_glob/path/max_depth/max_results. –ü–∞—Ä–∞–º–µ—Ç—Ä–∞ path_mode –Ω–µ—Ç: auto-path (exact|glob|regex) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ path.',
    inputSchema: {
      type: 'object',
      properties: {
        name_glob: { type: 'string', description: 'Glob —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏' },
        name_regex: { type: 'string', description: 'Regex (C#/.NET) —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏' },
        tag_glob: { type: 'string', description: 'Glob —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É' },
        where: { type: 'string', description: 'WHERE-DSL: and/or/not, —Å–∫–æ–±–∫–∏, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (==,!=,>,>=,<,<=), contains/startswith/endswith/matches, hasComp(Type). –ü—É—Ç–∏: name,id,path,active,tag,layer, GameObject.*, Transform.*, <Component>.<property>' },
        select: {
          type: 'array',
          items: { type: 'string' },
          description: '–ö–∞–∫–∏–µ –ø–æ–ª—è –≤—ã–±—Ä–∞—Ç—å —É —Å–æ–≤–ø–∞–≤—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä—ã: ["GameObject.name","path","Transform.position","Light.intensity","pos = Transform.position","materials[0].name"]'
        },
        max_results: { type: 'number', default: 100, description: '–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤' },
        path: { type: 'string', description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ (root –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é). –ü—É—Ç—å —á–µ—Ä–µ–∑ "/". Auto-path: exact (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤), glob (–µ—Å–ª–∏ –µ—Å—Ç—å * ? [..]), regex (–µ—Å–ª–∏ –µ—Å—Ç—å ^ $ ( ) | { } \\). –í—Å–µ –º–∞—Ç—á–∏ ‚Äî –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É' },
        max_depth: { type: 'number', default: -1, description: '–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞ (‚àí1 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)' },
        allow_large_response: {
          type: 'boolean',
          default: false,
          description: '–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–ø–∞—Å–Ω–æ –¥–ª—è LLM)'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        name_glob: params.name_glob,
        name_regex: params.name_regex,
        tag_glob: params.tag_glob,
        where: typeof params.where === 'string' ? params.where : undefined,
        select: Array.isArray(params.select) ? params.select : undefined,
        max_results: typeof params.max_results === 'number' ? params.max_results : 100,
        allow_large_response: !!params.allow_large_response,
        path: params.path,
        max_depth: typeof params.max_depth === 'number' ? params.max_depth : undefined
      };
      return await handleUnityRequest('/api/scene_grep', requestBody, 20000);
    }
  }
];

export const unityModule = {
  name: 'unity',
  description: 'Unity Bridge: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç AI ‚Üî Unity3D. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ C# –∫–æ–¥–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω—ã.',
  tools: unityTools,
  
  decorators: {
    disableSystemInfo: true,
    disableDebugLogs: true
  }
}; 