// üî• GIT MCP VIRTUAL SERVER üî•
// –£–º–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–∞–¥ —Å–ª–æ–∂–Ω—ã–º git —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –ø–æ–º–Ω–∏—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏
// –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è = –ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø–æ–Ω—è—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –ü–ò–ó–î–ê–¢–´–ú –æ–ø–∏—Å–∞–Ω–∏–µ–º




import { execSync } from 'child_process';
import path from 'path';
import { getWorkspaceRoot, findGitRoot } from '../utils/workspaceUtils.js';
import { logInfo, logSuccess } from '../utils/logger.js';

/**
 * üéØ –ü–û–õ–£–ß–ò–¢–¨ GIT STATUS –î–õ–Ø –î–ï–ö–û–†–ê–¢–û–†–û–í
 * –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤ git_status –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –∏ –≤ module decorator
 */
async function getGitStatus(detailed = false) {
  try {
    const command = detailed ? 'git status' : 'git status --porcelain';
    const result = execSync(command, {
      encoding: 'utf8',
      cwd: getWorkspaceRoot()
    });

    const statusText = result || "Working directory clean ‚ú®";
    return {
      success: true,
      status: statusText,
      clean: !result || result.trim() === ''
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í
const restore_file = {
  name: "restore_file",
  description: "üîÑ –°–ü–ê–°–ê–¢–ï–õ–¨ –§–ê–ô–õ–û–í! –¢–≤–æ–π git-—Ä–µ–∞–Ω–∏–º–∞—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ! üîÑ\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–ù–∞–∫–æ—Å—è—á–∏–ª —Å —Ñ–∞–π–ª–æ–º? –Ø –≤–µ—Ä–Ω—É –µ–≥–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–∫—É–¥–∞\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ü–†–û–ü–ê–î–£–¢ –Ω–∞–≤—Å–µ–≥–¥–∞!\n" +
    "üêï –¢–í–û–ô GIT –†–ï–ê–ù–ò–ú–ê–¢–û–†: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç git checkout HEAD –¥–ª—è –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
  inputSchema: {
    type: "object",
    properties: {
      filepath: {
        type: "string",
        description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)"
      }
    },
    required: ["filepath"]
  },
  handler: async (args) => {
    const { filepath } = args;

    try {
      const result = execSync(`git checkout HEAD -- "${filepath}"`, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return `üîÑ **FILE RESTORED FROM GIT** üîÑ\n\n` +
        `üìÅ **File:** ${filepath}\n` +
        `‚úÖ **Status:** Successfully restored from last commit\n` +
        `‚ö†Ô∏è **Warning:** All unsaved changes in this file are lost!\n\n` +
        `üíª **Powered by Git Tools!**`;
    } catch (error) {
      throw new Error(`‚ùå **GIT RESTORE ERROR** ‚ùå\n\n` +
        `üìÅ **File:** ${filepath}\n` +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üìä –°–¢–ê–¢–£–° –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø  
const status = {
  name: "status",
  description: "üìä –î–ò–ê–ì–ù–û–°–¢ –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø! –¢–≤–æ–π git-–¥–æ–∫—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞! üìä\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–ü–æ–∫–∞–∂–∏ –º–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - —è —Ä–∞—Å—Å–∫–∞–∂—É —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ, –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–π detailed=true –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n" +
    "üêï –¢–í–û–ô GIT –î–ò–ê–ì–ù–û–°–¢: –ß–∏—Ç–∞–µ—Ç git status –≤ –º–∞—à–∏–Ω–Ω–æ–º –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
  inputSchema: {
    type: "object",
    properties: {
      detailed: {
        type: "boolean",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏–π)",
        default: false
      }
    }
  },
  handler: async (args) => {
    const { detailed = false } = args;

    const statusResult = await getGitStatus(detailed);

    if (!statusResult.success) {
      throw new Error(`‚ùå **GIT STATUS ERROR** ‚ùå\n\n` +
        `üí• **Error:** ${statusResult.error}`);
    }

    return `üìä **GIT STATUS** üìä\n\n` +
      `üìã **Mode:** ${detailed ? 'Detailed' : 'Short'}\n\n` +
      `üìù **Status:**\n\`\`\`\n${statusResult.status}\n\`\`\`\n\n` +
      `üíª **Powered by Git Tools!**`;
  }
};

// üíæ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ö–û–ú–ú–ò–¢
const safe_commit = {
  name: "safe_commit", 
  description: "üíæ –£–ú–ù–´–ô –ê–†–•–ò–í–ê–†–ò–£–°! –¢–≤–æ–π –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π git-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ–≤–µ—Ç—É–µ—Ç! üíæ\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–î–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–º–Ω–æ —Å–æ—Ö—Ä–∞–Ω—é!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–∞\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: üöÄ –ê–í–¢–û–°–û–ó–î–ê–ï–¢ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–±–∏—Ç—å –±–æ–ª—å—à–∏–µ –∫–æ–º–º–∏—Ç—ã\n" +
    "üêï –¢–í–û–ô –î–†–ï–°–°–ò–†–û–í–ê–ù–ù–´–ô –ê–†–•–ò–í–ê–†–ò–£–°: –î—É–º–∞–µ—Ç –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º, —Å–æ–∑–¥–∞–µ—Ç .gitignore –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã!",
  inputSchema: {
    type: "object",
    properties: {
      message: {
        type: "string",
        description: "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)"
      },
      add_all: {
        type: "boolean",
        description: "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (git add .) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ (git add -u)",
        default: true
      }
    },
    required: ["message"]
  },
  handler: async (args) => {
    const { message, add_all = true } = args;

    try {
      // üß† –£–ú–ù–´–ô –ü–û–ò–°–ö GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
      const gitRoot = await findGitRoot();
      
      // üöÄ –ê–í–¢–û–°–û–ó–î–ê–ù–ò–ï GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –ï–°–õ–ò –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        execSync('git status', { 
          cwd: gitRoot, 
          stdio: 'ignore' 
        });
      } catch (gitError) {
        // Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
        logInfo(`üî• Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ ${gitRoot}`);
        
        execSync('git init', { 
          cwd: gitRoot,
          stdio: 'pipe'
        });
        
        // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const fs = await import('fs/promises');
        const gitignorePath = path.join(gitRoot, '.gitignore');
        try {
          await fs.access(gitignorePath);
        } catch {
          // .gitignore –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π
          const basicGitignore = `# Node modules
node_modules/
npm-debug.log*

# Build outputs  
dist/
build/
.next/

# Environment files
.env
.env.local
.env.*.local

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Logs
logs/
*.log
`;
          await fs.writeFile(gitignorePath, basicGitignore, 'utf8');
          logInfo(`üìù –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π .gitignore —Ñ–∞–π–ª`);
        }
        
        logSuccess(`‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!`);
      }

      // üîç –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–î –ö–û–ú–ú–ò–¢–û–ú
      let analysis = { warnings: [], suggestions: [], stats: {} };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      try {
        const statusResult = execSync('git status --porcelain', {
          encoding: 'utf8',
          cwd: gitRoot
        });

        if (!statusResult.trim()) {
          return `üêï **–£–ú–ù–´–ô –ê–†–•–ò–í–ê–†–ò–£–°:** –ù–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô –î–õ–Ø –ö–û–ú–ú–ò–¢–ê! üêï\n\n` +
            `üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:** "${message}"\n` +
            `üìä **–°—Ç–∞—Ç—É—Å:** –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è\n\n` +
            `üí° **–°–û–í–ï–¢ –ü–ò–¢–û–ú–¶–ê:** –í–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`;
        }

        // –ü–æ–¥—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const lines = statusResult.trim().split('\n');
        analysis.stats = {
          total: lines.length,
          modified: lines.filter(l => l.startsWith(' M')).length,
          added: lines.filter(l => l.startsWith('A')).length,
          untracked: lines.filter(l => l.startsWith('??')).length
        };

        // –£–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (analysis.stats.total > 15) {
          analysis.warnings.push(`üö® –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ (${analysis.stats.total}) - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–±–∏—Ç—å –∫–æ–º–º–∏—Ç`);
        }
        if (analysis.stats.untracked > 8) {
          analysis.warnings.push(`üìÅ –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (${analysis.stats.untracked}) - –ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã`);
        }
        if (message.length < 10) {
          analysis.warnings.push(`üìù –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${message.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        }
      } catch (e) { /* ignore */ }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–∏—Ç
      const addCommand = add_all ? 'git add .' : 'git add -u';
      execSync(addCommand, { cwd: gitRoot });

      const result = execSync(`git commit -m "${message}"`, {
        encoding: 'utf8',
        cwd: gitRoot
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –∫–æ–º–º–∏—Ç–∞
      let commitHash = '';
      try {
        commitHash = execSync('git rev-parse --short HEAD', {
          encoding: 'utf8',
          cwd: gitRoot
        }).trim();
      } catch (e) { /* ignore */ }

      return `üêï **–£–ú–ù–´–ô –ê–†–•–ò–í–ê–†–ò–£–° –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ò–õ!** üêï\n\n` +
        `üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:** "${message}"\n` +
        `üéØ **–ö–æ–º–º–∏—Ç:** ${commitHash}\n` +
        `üìÅ **–†–µ–∂–∏–º:** ${add_all ? '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (git add .)' : '–¢–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ (git add -u)'}\n\n` +
        `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n` +
        `   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${analysis.stats.total || 0}\n` +
        `   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ: ${analysis.stats.modified || 0}\n` +
        `   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${analysis.stats.added || 0}\n` +
        `   ‚Ä¢ –ù–æ–≤—ã—Ö: ${analysis.stats.untracked || 0}\n\n` +
        (analysis.warnings.length > 0 ?
          `‚ö†Ô∏è **–ó–ê–ú–ï–ß–ê–ù–ò–Ø –ü–ò–¢–û–ú–¶–ê:**\n${analysis.warnings.map(w => `   ‚Ä¢ ${w}`).join('\n')}\n\n` : '') +
        `üìã **–†–ï–ó–£–õ–¨–¢–ê–¢ GIT:**\n\`\`\`\n${result}\n\`\`\`\n\n` +
        `‚úÖ **–ö–û–ú–ú–ò–¢ –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û!**`;

    } catch (error) {
      // –£–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      let diagnosis = [];
      if (error.message.includes('nothing to commit')) {
        diagnosis.push('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—å git status');
      } else if (error.message.includes('not a git repository')) {
        diagnosis.push('–ü—Ä–æ–±–ª–µ–º–∞ —Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º - –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
      }

      throw new Error(`‚ùå **–£–ú–ù–´–ô –ê–†–•–ò–í–ê–†–ò–£–° –°–¢–û–õ–ö–ù–£–õ–°–Ø –° –ü–†–û–ë–õ–ï–ú–û–ô** ‚ùå\n\n` +
        `üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:** "${message}"\n` +
        `üí• **–û—à–∏–±–∫–∞:** ${error.message}\n\n` +
        (diagnosis.length > 0 ?
          `üß† **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ò–¢–û–ú–¶–ê:**\n${diagnosis.map(d => `   ‚Ä¢ ${d}`).join('\n')}` : ''));
    }
  }
};

// üìú –ò–°–¢–û–†–ò–Ø –ö–û–ú–ú–ò–¢–û–í
const log = {
  name: "log",
  description: "üìú –ò–°–¢–û–†–ò–ö –ü–†–û–ï–ö–¢–ê! –¢–≤–æ–π git-–ª–µ—Ç–æ–ø–∏—Å–µ—Ü —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—à–ª–æ–µ! üìú\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é? –ü–æ–∫–∞–∂—É –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ –∫–æ–º–º–∏—Ç–æ–≤!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã —Å —Ö–µ—à–∞–º–∏, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –≥—Ä–∞—Ñ–æ–º –≤–µ—Ç–æ–∫\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–π count –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, graph=true –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n" +
    "üêï –¢–í–û–ô GIT –õ–ï–¢–û–ü–ò–°–ï–¶: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç --oneline --graph --decorate –≤ –∫—Ä–∞—Å–æ—Ç–µ",
  inputSchema: {
    type: "object",
    properties: {
      count: {
        type: "number",
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)",
        default: 10
      },
      graph: {
        type: "boolean",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ –≤–µ—Ç–æ–∫",
        default: true
      }
    }
  },
  handler: async (args) => {
    const { count = 10, graph = true } = args;

    try {
      const graphFlag = graph ? '--graph' : '';
      const result = execSync(`git log --oneline ${graphFlag} --decorate -${count}`, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return `üìú **GIT HISTORY** üìú\n\n` +
        `üìä **Count:** ${count} commits\n` +
        `üåø **Graph:** ${graph ? 'Enabled' : 'Disabled'}\n\n` +
        `üìã **Commits:**\n\`\`\`\n${result}\n\`\`\`\n\n` +
        `üíª **Powered by Git Tools!**`;
    } catch (error) {
      throw new Error(`‚ùå **GIT LOG ERROR** ‚ùå\n\n` +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üîç –†–ê–ó–õ–ò–ß–ò–Ø
const diff = {
  name: "diff",
  description: "üîç –î–ï–¢–ï–ö–¢–ò–í –ò–ó–ú–ï–ù–ï–ù–ò–ô! –¢–≤–æ–π git-—Å—ã—â–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–∞–∑–ª–∏—á–∏—è! üîç\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–ü–æ–∫–∞–∂–∏ —Ñ–∞–π–ª - —è –Ω–∞–π–¥—É –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∂—É diff!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –ü–æ–¥—Ä–æ–±–Ω—ã–π diff —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏/—É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: staged=true –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞, false –¥–ª—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n" +
    "üêï –¢–í–û–ô GIT –°–´–©–ò–ö: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç git diff –∏ git diff --cached –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
  inputSchema: {
    type: "object",
    properties: {
      staged: {
        type: "boolean",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å–µ (git add) –≤–º–µ—Å—Ç–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
        default: false
      },
      filepath: {
        type: "string",
        description: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
      }
    }
  },
  handler: async (args) => {
    const { staged = false, filepath } = args;

    try {
      let command = staged ? 'git diff --cached' : 'git diff';
      if (filepath) {
        command += ` "${filepath}"`;
      }

      const result = execSync(command, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      const type = staged ? "staged (after git add)" : "working directory";
      const file = filepath ? ` for ${filepath}` : "";
      const diffText = result || "No changes ‚ú®";

      return {
        success: true,
        message: `üîç **GIT DIFF** üîç\n\n` +
          `üìä **Type:** ${type}${file}\n\n` +
          `üìã **Changes:**\n\`\`\`diff\n${diffText}\n\`\`\`\n\n` +
          `üíª **Powered by Git Tools!**`
      };
    } catch (error) {
      throw new Error(`‚ùå **GIT DIFF ERROR** ‚ùå\n\n` +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üåø –í–ï–¢–ö–ò
const branch = {
  name: "branch",
  description: "üåø –°–ê–î–û–í–ù–ò–ö –í–ï–¢–û–ö! –¢–≤–æ–π git-–±–æ—Ç–∞–Ω–∏–∫ –≤—ã—Ä–∞—â–∏–≤–∞–µ—Ç –∏ –ø–æ–¥—Ä–µ–∑–∞–µ—Ç –≤–µ—Ç–∫–∏! üåø\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–•–æ—á–µ—à—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É? –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è? –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é? –Ø –≤—Å—ë —Å–¥–µ–ª–∞—é!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫, —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: –í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π!\n" +
    "üêï –¢–í–û–ô GIT –ë–û–¢–ê–ù–ò–ö: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç git branch, checkout, switch –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  inputSchema: {
    type: "object",
    properties: {
      action: {
        type: "string",
        enum: ["list", "create", "switch", "delete"],
        description: "–î–µ–π—Å—Ç–≤–∏–µ: list=—Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫, create=—Å–æ–∑–¥–∞—Ç—å, switch=–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è, delete=—É–¥–∞–ª–∏—Ç—å"
      },
      branch_name: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–¥–ª—è create, switch, delete)"
      },
      force: {
        type: "boolean",
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ (git branch -D)",
        default: false
      }
    },
    required: ["action"]
  },
  handler: async (args) => {
    const { action, branch_name, force = false } = args;

    try {
      let command;
      let message;

      switch (action) {
        case 'list':
          command = 'git branch -a';
          message = "üåø All branches:";
          break;
        case 'create':
          if (!branch_name) throw new Error("Branch name required");
          command = `git checkout -b "${branch_name}"`;
          message = `üåø Created and switched to: ${branch_name}`;
          break;
        case 'switch':
          if (!branch_name) throw new Error("Branch name required");
          command = `git checkout "${branch_name}"`;
          message = `üåø Switched to: ${branch_name}`;
          break;
        case 'delete':
          if (!branch_name) throw new Error("Branch name required");
          const deleteFlag = force ? '-D' : '-d';
          command = `git branch ${deleteFlag} "${branch_name}"`;
          message = `üåø Deleted branch: ${branch_name}`;
          break;
        default:
          throw new Error("Unknown action");
      }

      const result = execSync(command, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return {
        success: true,
        message: `üåø **GIT BRANCH** üåø\n\n` +
          `‚ö° **Action:** ${action}\n` +
          (branch_name ? `üìù **Branch:** ${branch_name}\n` : '') +
          `\nüìã **Result:**\n\`\`\`\n${result}\n\`\`\`\n\n` +
          `üíª **Powered by Git Tools!**`
      };
    } catch (error) {
      throw new Error(`‚ùå **GIT BRANCH ERROR** ‚ùå\n\n` +
        `‚ö° **Action:** ${action}\n` +
        (branch_name ? `üìù **Branch:** ${branch_name}\n` : '') +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üì¶ –í–†–ï–ú–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
const stash = {
  name: "stash",
  description: "üì¶ –•–†–ê–ù–ò–¢–ï–õ–¨ –ß–ï–†–ù–û–í–ò–ö–û–í! –¢–≤–æ–π git-–∫–ª–∞–¥–æ–≤—â–∏–∫ –ø—Ä—è—á–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É! üì¶\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–ù–µ –≥–æ—Ç–æ–≤ –∫–æ–º–º–∏—Ç–∏—Ç—å? –°–ø—Ä—è—á—É –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –°–ø–∏—Å–æ–∫ stash'–µ–π, —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: save –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, restore –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n" +
    "üêï –¢–í–û–ô GIT –ö–õ–ê–î–û–í–©–ò–ö: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç git stash –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
  inputSchema: {
    type: "object",
    properties: {
      action: {
        type: "string",
        enum: ["save", "restore", "list", "drop"],
        description: "–î–µ–π—Å—Ç–≤–∏–µ: save=—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, restore=–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π, list=—Å–ø–∏—Å–æ–∫, drop=—É–¥–∞–ª–∏—Ç—å"
      },
      message: {
        type: "string",
        description: "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è stash (–ø—Ä–∏ save)"
      },
      stash_id: {
        type: "string",
        description: "ID stash'–∞ –¥–ª—è restore/drop (–Ω–∞–ø—Ä–∏–º–µ—Ä stash@{0})"
      }
    },
    required: ["action"]
  },
  handler: async (args) => {
    const { action, message, stash_id } = args;

    try {
      let command;
      let resultMessage;

      switch (action) {
        case 'save':
          command = message ? `git stash push -m "${message}"` : 'git stash push';
          resultMessage = `üì¶ Changes saved to stash${message ? `: ${message}` : ''}`;
          break;
        case 'restore':
          command = stash_id ? `git stash pop "${stash_id}"` : 'git stash pop';
          resultMessage = `üì¶ Restored changes from stash${stash_id ? `: ${stash_id}` : ' (latest)'}`;
          break;
        case 'list':
          command = 'git stash list';
          resultMessage = "üì¶ Stash list:";
          break;
        case 'drop':
          if (!stash_id) throw new Error("Stash ID required for drop");
          command = `git stash drop "${stash_id}"`;
          resultMessage = `üì¶ Dropped stash: ${stash_id}`;
          break;
        default:
          throw new Error("Unknown action");
      }

      const result = execSync(command, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return {
        success: true,
        message: `üì¶ **GIT STASH** üì¶\n\n` +
          `‚ö° **Action:** ${action}\n` +
          (message ? `üìù **Message:** ${message}\n` : '') +
          (stash_id ? `üÜî **Stash ID:** ${stash_id}\n` : '') +
          `\nüìã **Result:**\n\`\`\`\n${result || 'Operation completed ‚ú®'}\n\`\`\`\n\n` +
          `üíª **Powered by Git Tools!**`
      };
    } catch (error) {
      throw new Error(`‚ùå **GIT STASH ERROR** ‚ùå\n\n` +
        `‚ö° **Action:** ${action}\n` +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
const sync = {
  name: "sync",
  description: "üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¢–û–† –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í! –¢–≤–æ–π git-–∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è! üîÑ\n\n" +
    "üó£Ô∏è –ì–û–í–û–†–ò–¢ –¢–ï–ë–ï: '–ù—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è? –°–∫–∞—á–∞—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏—è!'\n" +
    "üìä –î–ê–ï–¢ –î–ê–ù–ù–´–ï: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã pull/push/fetch –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏\n" +
    "üí° –ù–ê–ü–†–ê–í–õ–Ø–ï–¢: –í–ù–ò–ú–ê–ù–ò–ï! pull –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!\n" +
    "üêï –¢–í–û–ô GIT –ö–£–†–¨–ï–†: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç git pull/push/fetch –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
  inputSchema: {
    type: "object",
    properties: {
      action: {
        type: "string",
        enum: ["pull", "push", "fetch"],
        description: "–î–µ–π—Å—Ç–≤–∏–µ: pull=—Å–∫–∞—á–∞—Ç—å –∏ —Å–ª–∏—Ç—å, push=–æ—Ç–ø—Ä–∞–≤–∏—Ç—å, fetch=—Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞—Ç—å –±–µ–∑ —Å–ª–∏—è–Ω–∏—è"
      },
      remote: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é origin)",
        default: "origin"
      },
      branch: {
        type: "string",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)"
      },
      force: {
        type: "boolean",
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π push (git push --force) - –û–ü–ê–°–ù–û!",
        default: false
      }
    },
    required: ["action"]
  },
  handler: async (args) => {
    const { action, remote = "origin", branch, force = false } = args;

    try {
      let command;
      let message;

      switch (action) {
        case 'pull':
          command = branch ? `git pull ${remote} ${branch}` : `git pull ${remote}`;
          message = `üîÑ Pulling changes from ${remote}${branch ? `/${branch}` : ''}`;
          break;
        case 'push':
          const forceFlag = force ? '--force' : '';
          command = branch ? `git push ${forceFlag} ${remote} ${branch}` : `git push ${forceFlag} ${remote}`;
          message = `üîÑ Pushing changes to ${remote}${branch ? `/${branch}` : ''}${force ? ' (FORCE!)' : ''}`;
          break;
        case 'fetch':
          command = `git fetch ${remote}`;
          message = `üîÑ Fetching info from ${remote} (no merge)`;
          break;
        default:
          throw new Error("Unknown action");
      }

      const result = execSync(command, {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return {
        success: true,
        message: `üîÑ **GIT SYNC** üîÑ\n\n` +
          `‚ö° **Action:** ${action}\n` +
          `üåê **Remote:** ${remote}\n` +
          (branch ? `üåø **Branch:** ${branch}\n` : '') +
          (force ? `‚ö†Ô∏è **Force:** YES (DANGEROUS!)\n` : '') +
          `\nüìã **Result:**\n\`\`\`\n${result}\n\`\`\`\n\n` +
          `üíª **Powered by Git Tools!**`
      };
    } catch (error) {
      throw new Error(`‚ùå **GIT SYNC ERROR** ‚ùå\n\n` +
        `‚ö° **Action:** ${action}\n` +
        `üåê **Remote:** ${remote}\n` +
        `üí• **Error:** ${error.message}`);
    }
  }
};

// üö® EMERGENCY HARD RESET - –∫–æ–≥–¥–∞ –≤—Å—ë –∑–∞–ø–æ—Ä–∏–ª –∏ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è!
const hard_reset = {
  name: "hard_reset",
  description: 'üö® EMERGENCY: Hard reset –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–∏—Ç—É. –ü–ï–†–í–´–ô –í–´–ó–û–í - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ. –í–¢–û–†–û–ô –í–´–ó–û–í —Å confirm: true - —Ä–µ–∞–ª—å–Ω–æ –¥–µ–ª–∞–µ—Ç reset',
  inputSchema: {
    type: 'object',
    properties: {
      confirm: {
        type: 'boolean',
        description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—à—å —Ä–∏—Å–∫–∏ (–ø–æ—Ç–µ—Ä—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π). –ë–ï–ó —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞ - —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ',
        default: false
      }
    }
  },
  handler: async (args) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ
      const statusResult = execSync('git status --porcelain', {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      const hasChanges = statusResult.trim();

      // –ü–ï–†–í–´–ô –≠–¢–ê–ü: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ
      if (!args.confirm) {
        if (!hasChanges) {
          return `‚úÖ **–ë–ï–ó–û–ü–ê–°–ù–û –î–õ–Ø RESET** ‚úÖ

üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:** –ù–µ—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
üéØ **–ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å reset –±–µ–∑ –ø–æ—Ç–µ—Ä—å!**

üö® **–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è reset:** –í—ã–∑–æ–≤–∏ —Å–Ω–æ–≤–∞ —Å \`confirm: true\`
üõ†Ô∏è **Powered by Emergency Git Tools!**`;
        }

        return `‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø** ‚ö†Ô∏è

üìã **–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
\`\`\`
${hasChanges}
\`\`\`

üíÄ **–≠–¢–ò –§–ê–ô–õ–´ –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´ –ù–ê–í–°–ï–ì–î–ê!**

ü§ñ **–ö–ª–æ–¥, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ñ–∞–π–ª—ã –≤—ã—à–µ:**
        - üîç –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ-—Ç–æ **–°–û–ú–ù–ò–¢–ï–õ–¨–ù–û–ï** (README, –∫–æ–Ω—Ñ–∏–≥–∏, –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã) ‚Üí **–ù–ï –î–ï–õ–ê–ô** \`confirm: true\` ‚Üí **–°–ü–†–û–°–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!**
- üòé –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ **–ü–û–•–£–ô** (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥) ‚Üí –¥–µ–ª–∞–π \`confirm: true\`

üö® **–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è reset:** –í—ã–∑–æ–≤–∏ —Å–Ω–æ–≤–∞ —Å \`confirm: true\`

üõ†Ô∏è **Powered by Emergency Git Tools!**`;
      }

      // –í–¢–û–†–û–ô –≠–¢–ê–ü: –†–µ–∞–ª—å–Ω–æ –¥–µ–ª–∞–µ–º reset
      const result = execSync('git reset --hard HEAD', {
        encoding: 'utf8',
        cwd: getWorkspaceRoot()
      });

      return `üö® **EMERGENCY HARD RESET –í–´–ü–û–õ–ù–ï–ù** üö®

‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${result.trim() || 'Reset completed'}

${hasChanges ? 'üíÄ **–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û–¢–ï–†–Ø–ù–´ –ù–ê–í–°–ï–ì–î–ê!**' : '‚ú® **–ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ –ø–æ—Ç–µ—Ä—è–Ω–æ**'}

üîÑ **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** –û—Ç–∫–∞—á–µ–Ω –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–∏—Ç—É
üõ†Ô∏è **Powered by Emergency Git Tools!**`;

    } catch (error) {
      throw new Error(`‚ùå Hard reset failed: ${error.message}`);
    }
  }
};

// üî• –ú–ê–°–°–ò–í –í–°–ï–• GIT –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
const gitTools = [
  restore_file,
  status,
  safe_commit,
  log,
  diff,
  branch,
  stash,
  sync,
  hard_reset  // üö® EMERGENCY TOOL!
];

/**
 * üìä GIT STATUS MODULE DECORATOR (–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π git –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
const gitStatusDecorator = async (callOriginalFunc, args) => {
  // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const response = await callOriginalFunc();

  const statusResult = await getGitStatus(false); // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞

  if (!statusResult.success) {
    // –ï—Å–ª–∏ git status –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ –ª–æ–º–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
    return {
      ...response,
      content: [
        ...response.content,
        {
          type: "text",
          text: `‚ö†Ô∏è **Git Status Unavailable** ‚ö†Ô∏è\n\n` +
            `üí• **Error:** ${statusResult.error}`
        }
      ]
    };
  }

  // –î–æ–±–∞–≤–ª—è–µ–º git status –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  return {
    ...response,
    content: [
      ...response.content,
      {
        type: "text",
        text: `üìä **Git Repository Status** üìä\n\n` +
          (statusResult.clean
            ? `‚ú® **Working directory clean** ‚ú®`
            : `üìù **Changes detected:**\n\`\`\`\n${statusResult.status}\n\`\`\``
          )
      }
    ]
  };
};

// üöÄ –≠–ö–°–ü–û–†–¢ –ú–û–î–£–õ–Ø –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï
export const gitModule = {
  namespace: "git",
  description: "üî• Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - —É–º–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–∞–¥ —Å–ª–æ–∂–Ω—ã–º git —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º",
  tools: gitTools,
  decorators: [gitStatusDecorator] // üéØ MODULE DECORATOR - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç git status –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!
};

/**
 * üî• GIT MCP VIRTUAL SERVER - –ú–û–î–£–õ–¨ –ó–ê–í–ï–†–®–Å–ù!
 * 
 * ‚úÖ 8 —É–º–Ω—ã—Ö git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ü–ò–ó–î–ê–¢–´–ú–ò –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
 * ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 * ‚úÖ –í—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ git —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–ø—Ä—è—Ç–∞–Ω—ã –∑–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
 * ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
 * 
 * üéØ –ë–û–õ–¨–®–ï –ù–ò–ö–ê–ö–û–ô –ü–£–¢–ê–ù–ò–¶–´ –° GIT –ö–û–ú–ê–ù–î–ê–ú–ò!
 */ 