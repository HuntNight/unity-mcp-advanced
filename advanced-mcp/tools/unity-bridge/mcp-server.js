#!/usr/bin/env node

/**
 * üåâ UNITY BRIDGE MCP SERVER - –ü–†–û–ó–†–ê–ß–ù–´–ô –ú–û–°–¢ –ö UNITY API! üåâ
 * 
 * –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Unity Editor —á–µ—Ä–µ–∑ HTTP API.
 * –û–¥–∏–Ω —Ä–∞–∑ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ - –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú Unity API!
 * 
 * üî• –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
 * - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ª—é–±—ã—Ö Unity –º–µ—Ç–æ–¥–æ–≤
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GameObjects –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –°–∫—Ä–∏–Ω—à–æ—Ç—ã Game View –∏ Scene View
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Play Mode –∏ —Å–∏–º—É–ª—è—Ü–∏–µ–π
 * - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Unity Editor API –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * 
 * üöÄ –ü–†–û–ó–†–ê–ß–ù–´–ô –ú–û–°–¢ - –ù–ò–ö–û–ì–î–ê –ù–ï –ù–£–ñ–ù–û –ú–ï–ù–Ø–¢–¨ –ö–û–î –†–ê–°–®–ò–†–ï–ù–ò–Ø!
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';

const UNITY_BASE_URL = 'http://localhost:7777';

class UnityBridgeServer {
  constructor() {
    this.server = new Server(
      {
        name: 'unity-bridge',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
  }

  setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'unity_connect',
          description: 'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Unity Bridge –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
          inputSchema: {
            type: 'object',
            properties: {},
            required: [],
          },
        },
        {
          name: 'unity_api_call',
          description: 'üî• –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –í–´–ó–û–í –õ–Æ–ë–´–• UNITY API - –ü–†–û–ó–†–ê–ß–ù–´–ô –ú–û–°–¢!',
          inputSchema: {
            type: 'object',
            properties: {
              target: {
                type: 'string',
                description: '–ö–ª–∞—Å—Å Unity –¥–ª—è –≤—ã–∑–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: EditorApplication, GameObject, Camera)',
              },
              method: {
                type: 'string',
                description: '–ú–µ—Ç–æ–¥ –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã–∑–æ–≤–∞',
              },
              operation: {
                type: 'string',
                enum: ['get_property', 'set_property', 'call_method', 'call_static', 'create_object', 'find_object'],
                description: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
              },
              args: {
                type: 'array',
                description: '–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)',
                items: { type: 'any' },
              },
              value: {
                type: 'any',
                description: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–ª—è set_property)',
              },
            },
            required: ['target', 'operation'],
          },
        },
        {
          name: 'unity_create_object',
          description: 'üéÆ –°–æ–∑–¥–∞–Ω–∏–µ GameObject –≤ Unity —Å—Ü–µ–Ω–µ',
          inputSchema: {
            type: 'object',
            properties: {
              name: {
                type: 'string',
                description: '–ò–º—è –æ–±—ä–µ–∫—Ç–∞',
                default: 'New GameObject',
              },
              type: {
                type: 'string',
                enum: ['empty', 'cube', 'sphere', 'plane', 'cylinder'],
                description: '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞',
                default: 'empty',
              },
              position: {
                type: 'object',
                properties: {
                  x: { type: 'number' },
                  y: { type: 'number' },
                  z: { type: 'number' },
                },
                description: '–ü–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∏—Ä–µ',
                default: { x: 0, y: 0, z: 0 },
              },
            },
            required: [],
          },
        },
        {
          name: 'unity_find_objects',
          description: 'üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ Unity —Å—Ü–µ–Ω–µ',
          inputSchema: {
            type: 'object',
            properties: {
              type: {
                type: 'string',
                enum: ['name', 'tag'],
                description: '–¢–∏–ø –ø–æ–∏—Å–∫–∞',
                default: 'name',
              },
              value: {
                type: 'string',
                description: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞',
              },
            },
            required: ['value'],
          },
        },
        {
          name: 'unity_move_object',
          description: 'üìç –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ Unity —Å—Ü–µ–Ω–µ',
          inputSchema: {
            type: 'object',
            properties: {
              name: {
                type: 'string',
                description: '–ò–º—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è',
              },
              position: {
                type: 'object',
                properties: {
                  x: { type: 'number' },
                  y: { type: 'number' },
                  z: { type: 'number' },
                },
                description: '–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞',
              },
            },
            required: ['name', 'position'],
          },
        },
        {
          name: 'unity_play_mode',
          description: '‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Play Mode –≤ Unity',
          inputSchema: {
            type: 'object',
            properties: {
              action: {
                type: 'string',
                enum: ['play', 'stop', 'pause', 'toggle'],
                description: '–î–µ–π—Å—Ç–≤–∏–µ —Å Play Mode',
                default: 'toggle',
              },
            },
            required: [],
          },
        },
        {
          name: 'unity_screenshot',
          description: 'üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Unity Game View',
          inputSchema: {
            type: 'object',
            properties: {},
            required: [],
          },
        },
        {
          name: 'unity_info',
          description: '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Unity –ø—Ä–æ–µ–∫—Ç–µ',
          inputSchema: {
            type: 'object',
            properties: {},
            required: [],
          },
        },
      ],
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'unity_connect':
            return await this.handleConnect();
          case 'unity_api_call':
            return await this.handleApiCall(args);
          case 'unity_create_object':
            return await this.handleCreateObject(args);
          case 'unity_find_objects':
            return await this.handleFindObjects(args);
          case 'unity_move_object':
            return await this.handleMoveObject(args);
          case 'unity_play_mode':
            return await this.handlePlayMode(args);
          case 'unity_screenshot':
            return await this.handleScreenshot();
          case 'unity_info':
            return await this.handleInfo();
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`
            );
        }
      } catch (error) {
        throw new McpError(
          ErrorCode.InternalError,
          `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}: ${error.message}`
        );
      }
    });
  }

  async makeUnityRequest(endpoint, method = 'GET', data = null) {
    const url = `${UNITY_BASE_URL}${endpoint}`;
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    try {
      const response = await fetch(url, options);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      return result;
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        throw new Error('Unity Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Unity –∑–∞–ø—É—â–µ–Ω –∏ Unity Bridge Window –æ—Ç–∫—Ä—ã—Ç.');
      }
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Unity: ${error.message}`);
    }
  }

  async handleConnect() {
    try {
      const result = await this.makeUnityRequest('/health');
      return {
        content: [
          {
            type: 'text',
            text: `üåâ Unity Bridge –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n–°—Ç–∞—Ç—É—Å: ${result.status}\n–í—Ä–µ–º—è: ${result.timestamp}\n\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥!`,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Unity Bridge!\n\n–û—à–∏–±–∫–∞: ${error.message}\n\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n- Unity –∑–∞–ø—É—â–µ–Ω\n- Unity Bridge Window –æ—Ç–∫—Ä—ã—Ç (Window ‚Üí Claude ‚Üí Unity Bridge)\n- HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 7777`,
          },
        ],
      };
    }
  }

  async handleApiCall(args) {
    const { target, method, operation, args: methodArgs, value } = args;
    
    const data = {
      target,
      method,
      operation,
      args: methodArgs || [],
      value,
    };

    const result = await this.makeUnityRequest('/unity/api', 'POST', data);
    
    if (result.success) {
      return {
        content: [
          {
            type: 'text',
            text: `üî• –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô API –í–´–ó–û–í –í–´–ü–û–õ–ù–ï–ù!\n\n–¶–µ–ª—å: ${target}\n–ú–µ—Ç–æ–¥: ${method || 'N/A'}\n–û–ø–µ—Ä–∞—Ü–∏—è: ${operation}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n${JSON.stringify(result.result, null, 2)}`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Unity API');
    }
  }

  async handleCreateObject(args) {
    const { name = 'New GameObject', type = 'empty', position = { x: 0, y: 0, z: 0 } } = args;
    
    const data = { name, type, position };
    const result = await this.makeUnityRequest('/unity/create-object', 'POST', data);
    
    if (result.success) {
      return {
        content: [
          {
            type: 'text',
            text: `üéÆ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!\n\n–ò–º—è: ${result.name}\nID: ${result.object_id}\n–ü–æ–∑–∏—Ü–∏—è: (${result.position.x}, ${result.position.y}, ${result.position.z})`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞');
    }
  }

  async handleFindObjects(args) {
    const { type = 'name', value } = args;
    
    const data = { type, value };
    const result = await this.makeUnityRequest('/unity/find-objects', 'POST', data);
    
    if (result.success) {
      const objectsList = result.objects.map(obj => 
        `- ${obj.name} (ID: ${obj.id}, –ü–æ–∑–∏—Ü–∏—è: ${obj.position.x}, ${obj.position.y}, ${obj.position.z})`
      ).join('\n');
      
      return {
        content: [
          {
            type: 'text',
            text: `üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${result.count}\n\n${objectsList}`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤');
    }
  }

  async handleMoveObject(args) {
    const { name, position } = args;
    
    const data = { name, position };
    const result = await this.makeUnityRequest('/unity/move-object', 'POST', data);
    
    if (result.success) {
      return {
        content: [
          {
            type: 'text',
            text: `üìç –û–±—ä–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω!\n\n–ò–º—è: ${result.object_name}\n–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: (${result.new_position.x}, ${result.new_position.y}, ${result.new_position.z})`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞');
    }
  }

  async handlePlayMode(args) {
    const { action = 'toggle' } = args;
    
    const data = { action };
    const result = await this.makeUnityRequest('/unity/play-mode', 'POST', data);
    
    if (result.success) {
      const status = result.is_playing ? '–ó–ê–ü–£–©–ï–ù' : '–û–°–¢–ê–ù–û–í–õ–ï–ù';
      const pauseStatus = result.is_paused ? ' (–ù–ê –ü–ê–£–ó–ï)' : '';
      
      return {
        content: [
          {
            type: 'text',
            text: `‚ñ∂Ô∏è Play Mode: ${status}${pauseStatus}`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Play Mode');
    }
  }

  async handleScreenshot() {
    const result = await this.makeUnityRequest('/unity/screenshot');
    
    if (result.success) {
      return {
        content: [
          {
            type: 'text',
            text: `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω!\n\n–†–∞–∑–º–µ—Ä: ${result.width}x${result.height}\n–§–æ—Ä–º–∞—Ç: ${result.format}`,
          },
          {
            type: 'image',
            data: result.screenshot,
            mimeType: 'image/png',
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
  }

  async handleInfo() {
    const result = await this.makeUnityRequest('/unity/info');
    
    if (result.success) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Unity –ø—Ä–æ–µ–∫—Ç–µ:\n\n–í–µ—Ä—Å–∏—è Unity: ${result.unity_version}\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${result.project_name}\n–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: ${result.data_path}\nPlay Mode: ${result.is_playing ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: ${result.scene_count}\n–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ü–µ–Ω–∞: ${result.active_scene}`,
          },
        ],
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Unity');
    }
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('üåâ Unity Bridge MCP Server –∑–∞–ø—É—â–µ–Ω!');
  }
}

const server = new UnityBridgeServer();
server.run().catch(console.error); 