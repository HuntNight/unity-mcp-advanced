/**
 * üî• PROCESS HELPERS - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –û–ë–Å–†–¢–ö–ò –î–õ–Ø CHILD_PROCESS
 * 
 * üí° –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ò–î–ï–Ø: –í—Å–µ spawn/exec –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ë—Ä–Ω—É—Ç—ã –≤ –ø—Ä–æ–º–∏—Å—ã
 * —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ –¥–µ—Ä–µ–≤–æ –≤—ã–∑–æ–≤–æ–≤, –∞ –Ω–µ –≤ unhandled events!
 * 
 * üéØ –ü–†–ò–ù–¶–ò–ü–´:
 * - –í—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–æ–º–∏—Å—ã
 * - Error events –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ rejected promises
 * - –ù–∏–∫–∞–∫–∏—Ö unhandled errors!
 */

import { spawn, exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';

// üîß –ü–†–û–ú–ò–°–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô EXEC
export const execAsync = promisify(exec);

/**
 * üöÄ –ë–ï–ó–û–ü–ê–°–ù–´–ô SPAWN - –û–ë–Å–†–¢–ö–ê –í –ü–†–û–ú–ò–°
 * 
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string[]} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {object} options - –û–ø—Ü–∏–∏ spawn
 * @returns {Promise<ChildProcess>} –ü—Ä–æ–º–∏—Å —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º
 */
export function spawnAsync(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args, {
      shell: true,           // üî• –í–°–ï–ì–î–ê SHELL TRUE!
      env: process.env,      // –ù–∞—Å–ª–µ–¥—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      ...options
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    child.on('spawn', () => {
      resolve(child);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
    child.on('error', (error) => {
      reject(new Error(`Failed to spawn ${command}: ${error.message}`));
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    child.on('exit', (code, signal) => {
      if (code !== 0 && code !== null) {
        reject(new Error(`Process ${command} exited with code ${code}`));
      }
    });
  });
}

/**
 * üéØ SPAWN –° –û–ñ–ò–î–ê–ù–ò–ï–ú –ó–ê–í–ï–†–®–ï–ù–ò–Ø
 * 
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string[]} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {object} options - –û–ø—Ü–∏–∏ spawn
 * @returns {Promise<{stdout: string, stderr: string, code: number}>}
 */
export function spawnWithOutput(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args, {
      shell: true,
      env: process.env,
      ...options
    });

    let stdout = '';
    let stderr = '';

    if (child.stdout) {
      child.stdout.on('data', (data) => {
        stdout += data.toString();
      });
    }

    if (child.stderr) {
      child.stderr.on('data', (data) => {
        stderr += data.toString();
      });
    }

    child.on('error', (error) => {
      reject(new Error(`Failed to spawn ${command}: ${error.message}`));
    });

    child.on('close', (code) => {
      resolve({
        stdout: stdout.trim(),
        stderr: stderr.trim(),
        code: code || 0
      });
    });
  });
}

/**
 * üî• SPAWN –í –§–û–ù–ï –° –ü–†–û–í–ï–†–ö–û–ô –ó–ê–ü–£–°–ö–ê
 * 
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string[]} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {object} options - –û–ø—Ü–∏–∏ spawn
 * @param {function} healthCheck - –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
 * @returns {Promise<ChildProcess>} –ü—Ä–æ–º–∏—Å —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
 */
export function spawnBackground(command, args = [], options = {}, healthCheck = null) {
  return new Promise(async (resolve, reject) => {
    try {
      const process = await spawnAsync(command, args, {
        detached: false,  // –ù–µ –æ—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        stdio: 'pipe',    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        ...options
      });

      process.unref(); // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ

      // üîç –ï–°–õ–ò –ï–°–¢–¨ HEALTH CHECK - –ñ–î–Å–ú –ü–û–ö–ê –ü–†–û–¶–ï–°–° –ó–ê–ü–£–°–¢–ò–¢–°–Ø
      if (healthCheck && typeof healthCheck === 'function') {
        try {
          await healthCheck();
          resolve(process);
        } catch (error) {
          reject(new Error(`Health check failed: ${error.message}`));
        }
      } else {
        resolve(process);
      }

    } catch (error) {
      reject(error);
    }
  });
}

/**
 * üéØ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î–´
 * 
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
export async function commandExists(command) {
  try {
    const result = await spawnWithOutput('which', [command]);
    return result.code === 0 && result.stdout.length > 0;
  } catch (error) {
    return false;
  }
}

/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –ó–ê–ü–£–°–ö –° –ü–†–û–í–ï–†–ö–û–ô –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î–´
 * 
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string[]} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
 * @param {object} options - –û–ø—Ü–∏–∏ spawn
 * @returns {Promise<ChildProcess>} –ü—Ä–æ–º–∏—Å —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º
 */
export async function safeSpawn(command, args = [], options = {}) {
  // üîç –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ö–û–ú–ê–ù–î–ê –°–£–©–ï–°–¢–í–£–ï–¢
  const exists = await commandExists(command);
  if (!exists) {
    throw new Error(`Command "${command}" not found in PATH`);
  }

  return spawnAsync(command, args, options);
}

// üî• execAsync —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Å—Ç—Ä–æ–∫–µ 18 