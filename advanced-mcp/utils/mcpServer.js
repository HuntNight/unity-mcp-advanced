#!/usr/bin/env node

/**
 * üî• –û–°–ù–û–í–ù–û–ô MCP –°–ï–†–í–ï–† - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ò–î–ï–Ø: –í—ã–Ω–æ—Å–∏–º –í–°–Æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã!
 * –¢–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º MCP —Å–µ—Ä–≤–µ—Ä–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –ª–æ–≥–∏–∫—É.
 * –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ–∏—á—É (—Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–≥–æ–¥–∞) - –º–µ–Ω—è–µ–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!
 * 
 * üöÄ –≠–¢–û –ù–ê–°–¢–û–Ø–©–ò–ô DRY - Don't Repeat Yourself!
 */

// üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –ª—é–±–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema
} from '@modelcontextprotocol/sdk/types.js';

// üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// üé® –ò–ú–ü–û–†–¢–´ –ù–ê–®–ò–• –ú–û–î–£–õ–ï–ô
import { logInfo, logError, logSuccess, extractErrorDetails } from './logger.js';
import {
  addSystemScreenshotParameter,
  applyDecorators,
  initializeDefaultDecorators,
  addDecorator,
  removeDecorator,
  clearDecorators,
  getActiveDecorators
} from './decorators.js';
import { validateToolResponse } from './validation.js';
import { createResponseContent } from './responseHelpers.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// üö® –£–ë–†–ê–õ–ò –ë–£–§–ï–† –ù–ê–•–£–ô! –î–ï–õ–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–û –ß–ï–†–ï–ó –ü–†–û–ú–ò–°–´!

/**
 * üéØ –°–û–ó–î–ê–ù–ò–ï MCP –°–ï–†–í–ï–†–ê - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (v2: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ modules —Å namespace)
 * 
 * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} config.name - –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} config.version - –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} [config.modulesPath] - –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥—É–ª—è–º–∏
 * @returns {Object} –ì–æ—Ç–æ–≤—ã–π –∫ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä
 */
export function createMcpServer({ name, version, modulesPath = '../tools' }) {
  const server = new Server({ name, version }, { capabilities: { tools: {} } });

  // üî• –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ú–û–î–£–õ–ò –í –†–ê–ù–¢–ê–ô–ú–ï!
  let loadedModules = new Map(); // name -> module
  let allTools = new Map();      // toolName -> handler

  // üîß ES MODULES: –∏—Å–ø–æ–ª—å–∑—É–µ–º __dirname –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  // mcpServer.js –ª–µ–∂–∏—Ç –≤ utils/, –∞ tools/ —Ä—è–¥–æ–º —Å index.js
  const toolsDir = path.resolve(__dirname, '..', modulesPath);

  // üöÄ –ü–†–û–ú–ò–° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò - –ñ–î–Å–ú –ó–ê–ì–†–£–ó–ö–ò –í–°–ï–• –ú–û–î–£–õ–ï–ô!
  let initializationPromise = null;

  /**
   * üîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –ú–û–î–£–õ–ï–ô –ò–ó –ü–ê–ü–ö–ò
   */
  async function loadModulesFromDirectory() {
    logInfo(`üîç –ò—â–µ–º –º–æ–¥—É–ª–∏ –≤: ${toolsDir}`);

    if (!fs.existsSync(toolsDir)) {
      logError(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${toolsDir}`);
      fs.mkdirSync(toolsDir, { recursive: true });
      return;
    }

    const files = fs.readdirSync(toolsDir)
      .filter(file => file.endsWith('.js'))
      .filter(file => !file.startsWith('.'));

    logInfo(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} JS —Ñ–∞–π–ª–æ–≤: ${files.join(', ')}`);

    for (const file of files) {
      await loadSingleModule(file);
    }

    logSuccess(`üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${allTools.size} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
  }

  /**
   * üî• –ó–ê–ì–†–£–ó–ö–ê –û–î–ù–û–ì–û –ú–û–î–£–õ–Ø –° HOT RELOAD
   */
  async function loadSingleModule(filename) {
    try {
      const filePath = path.join(toolsDir, filename);
      const moduleName = path.basename(filename, '.js');

      // üöÄ HOT RELOAD: –¥–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
      const moduleUrl = `file://${filePath}?t=${Date.now()}`;

      const moduleExports = await import(moduleUrl);

      // –ò—â–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
      let moduleData = null;

      if (moduleExports.default) {
        moduleData = moduleExports.default;
      } else if (moduleExports[`${moduleName}Module`]) {
        moduleData = moduleExports[`${moduleName}Module`];
      } else {
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç —Å tools
        for (const [key, value] of Object.entries(moduleExports)) {
          if (value && typeof value === 'object' && value.tools) {
            moduleData = value;
            break;
          }
        }
      }

      if (!moduleData || !moduleData.tools) {
        return;
      }

      // üÜï ADD: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const toolsAdded = [];

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –º–∞—Å—Å–∏–≤ –∏ –æ–±—ä–µ–∫—Ç tools
      const toolsToProcess = Array.isArray(moduleData.tools)
        ? moduleData.tools
        : Object.entries(moduleData.tools);

      for (const toolItem of toolsToProcess) {
        let toolName, toolConfig;

        if (Array.isArray(moduleData.tools)) {
          // –ï—Å–ª–∏ tools - –º–∞—Å—Å–∏–≤, –±–µ—Ä—ë–º name –∏–∑ –æ–±—ä–µ–∫—Ç–∞
          toolConfig = toolItem;
          toolName = toolConfig.name;
        } else {
          // –ï—Å–ª–∏ tools - –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞–∫ –∏–º—è
          [toolName, toolConfig] = toolItem;
        }

        const fullToolName = `${moduleName}_${toolName}`;

        // –î–æ–±–∞–≤–ª—è–µ–º systemScreenshot –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const enhancedTool = addSystemScreenshotParameter(toolConfig);

        allTools.set(fullToolName, enhancedTool);
        toolsAdded.push(fullToolName);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª—å
      loadedModules.set(moduleName, moduleData);

      logSuccess(`‚úÖ Module ${moduleName} loaded: ${toolsAdded.join(', ')}`);

    } catch (error) {
      const errorDetails = extractErrorDetails(error);
      logError(`‚ùå Failed to load module ${filename}: ${errorDetails}`);
    }
  }

  /**
   * üîÑ HOT RELOAD - –ü–ï–†–ï–ß–ò–¢–ê–¢–¨ –í–°–ï –ú–û–î–£–õ–ò
   */
  async function reloadAllModules() {
    logInfo('üîÑ HOT RELOAD: Reloading all modules...');

    // –û—á–∏—â–∞–µ–º –≤—Å–µ
    loadedModules.clear();
    allTools.clear();

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    await loadModulesFromDirectory();

    return {
      success: true,
      modulesLoaded: loadedModules.size,
      toolsLoaded: allTools.size,
      modules: Array.from(loadedModules.keys()),
      tools: Array.from(allTools.keys())
    };
  }

  /**
   * üîÑ RELOAD SINGLE MODULE - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω –º–æ–¥—É–ª—å
   */
  async function reloadSingleModule(filename) {
    logInfo(`üîÑ HOT RELOAD: Reloading single module: ${filename}`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    const moduleName = path.basename(filename, '.js');
    const toolsToRemove = [];

    for (const [toolName] of allTools) {
      if (toolName.startsWith(`${moduleName}_`)) {
        toolsToRemove.push(toolName);
      }
    }

    toolsToRemove.forEach(toolName => allTools.delete(toolName));
    loadedModules.delete(moduleName);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await loadSingleModule(filename);

    return {
      success: true,
      reloadedModule: moduleName,
      toolsRemoved: toolsToRemove,
      toolsAdded: Array.from(allTools.keys()).filter(name => name.startsWith(`${moduleName}_`))
    };
  }

  // üéØ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í MCP –°–ï–†–í–ï–†–ê

  server.setRequestHandler(ListToolsRequestSchema, async () => {
    // –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (initializationPromise) {
      await initializationPromise;
    }

    const tools = Array.from(allTools.entries()).map(([name, config]) => ({
      name,
      description: config.description || 'No description',
      inputSchema: config.inputSchema || { type: 'object', properties: {} }
    }));

    return { tools };
  });

  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    // üî• –ì–õ–û–ë–ê–õ–¨–ù–´–ô TRY/CATCH - –õ–û–í–ò–ú –í–°–Å –ò –û–ë–û–†–ê–ß–ò–í–ê–ï–ú –í –ö–†–ê–°–ò–í–´–ô –¢–ï–ö–°–¢!
    try {
      if (!allTools.has(name)) {
        throw new Error(`‚ùå **TOOL NOT FOUND** ‚ùå\n\n` +
          `üîß **Requested Tool:** ${name}\n` +
          `üìã **Available Tools:** ${Array.from(allTools.keys()).join(', ')}\n\n` +
          `üõ†Ô∏è **Powered by MCP Error Handler!**`);
      }

      const tool = allTools.get(name);

      // üîß –°–û–ó–î–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø HANDLER'–ê –° –§–£–ù–ö–¶–ò–Ø–ú–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
      const context = {
        log: logInfo,  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logInfo,
        logError,
        logSuccess,
        createResponse: createResponseContent  // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!
      };

      // üéØ –í–´–ü–û–õ–ù–Ø–ï–ú HANDLER - –ú–û–ñ–ï–¢ –ë–†–û–°–ò–¢–¨ throw new Error()!
      logInfo(`üöÄ EXECUTING TOOL: ${name} with args: ${JSON.stringify(args)}`);
      let result = await tool.handler(args || {}, context);
      logInfo(`‚úÖ TOOL EXECUTED: ${name} - result type: ${typeof result}`);

      // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê - –ú–û–ñ–ï–¢ –ë–†–û–°–ò–¢–¨ –û–®–ò–ë–ö–£!
      validateToolResponse(result, name);

      // ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–†–ê–ß–ò–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –í –ü–†–ê–í–ò–õ–¨–ù–´–ô MCP –§–û–†–ú–ê–¢!
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ createResponseContent
      if (typeof result === 'string') {
        result = createResponseContent(result);
      }
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–±—ä–µ–∫—Ç —Å content –º–∞—Å—Å–∏–≤–æ–º - –¥–æ–≤–µ—Ä—è–µ–º—Å—è –µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é!
      // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, —Å–ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ç.–¥.)

      // üé® –ü–û–õ–£–ß–ê–ï–ú –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –¢–†–Å–•–£–†–û–í–ù–ï–í–û–ô –°–ò–°–¢–ï–ú–´
      const rawToolDecorators = tool.decorators || [];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º tool decorators (–º–æ–≥—É—Ç –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç args)
      const toolDecorators = [];
      for (const decorator of rawToolDecorators) {
        if (typeof decorator === 'function') {
          // –ï—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë —Å args —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
          const realDecorator = decorator(args);
          if (typeof realDecorator === 'function') {
            toolDecorators.push(realDecorator);
          }
        }
      }

      // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è module decorators
      const moduleName = name.split('_')[0];
      const moduleData = loadedModules.get(moduleName);
      const moduleDecorators = moduleData?.decorators || [];

      // üêõ DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ü–ï–†–ï–î –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º (–í–ê–ñ–ù–û: –¥–æ debug logs decorator!)
      logInfo(`üé® DECORATORS: Tool=${toolDecorators.length}, Module=${moduleDecorators.length}, System=${getActiveDecorators().length} for ${name}`);
      if (toolDecorators.length > 0) {
        logInfo(`üîß Tool decorators found: ${toolDecorators.map(d => d.name || 'anonymous').join(', ')}`);
      }
      if (moduleDecorators.length > 0) {
        logInfo(`üé≠ Module decorators found: ${moduleDecorators.map(d => d.name || 'anonymous').join(', ')}`);
      }

      // üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–†–Å–•–£–†–û–í–ù–ï–í–´–ï –î–ï–ö–û–†–ê–¢–û–†–´ –° –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô - –ú–û–ì–£–¢ –ë–†–û–°–ò–¢–¨ –û–®–ò–ë–ö–ò!
      result = await applyDecorators(async () => result, args, toolDecorators, moduleDecorators);

      // –ï—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MCP response —Å content –º–∞—Å—Å–∏–≤–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (result && result.content && Array.isArray(result.content)) {
        return result;
      }

      // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π MCP response (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      return {
        content: [
          {
            type: "text",
            text: typeof result === 'string' ? result : JSON.stringify(result, null, 2)
          }
        ]
      };

    } catch (error) {
      // üî• –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –û–®–ò–ë–û–ö - –ö–†–ê–°–ò–í–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û STACK TRACE!
      const errorMessage = error.message || 'Unknown error';
      const stackTrace = error.stack || 'No stack trace available';

      logError(`Tool execution failed: ${errorMessage}`);

      // üé® –°–û–ó–î–ê–Å–ú –ö–†–ê–°–ò–í–£–Æ –û–®–ò–ë–ö–£ –° –ü–û–õ–ù–´–ú –ö–û–ù–¢–ï–ö–°–¢–û–ú!
      const beautifulError = `üö® **ERROR OCCURRED** üö®

‚ùå **Message:** ${errorMessage}

üîß **Tool:** ${name}
üìù **Arguments:** ${JSON.stringify(args, null, 2)}

üìö **Stack Trace:**
\`\`\`
${stackTrace}
\`\`\`

üõ†Ô∏è **Powered by MCP Error Handler - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´!**`;

      // üéØ –í–û–ó–í–†–ê–©–ê–ï–ú –ö–ê–ö –û–ë–´–ß–ù–´–ô RESPONSE (–ü–û–•–£–ô –ù–ê MCP –°–¢–ê–ù–î–ê–†–¢–´!)
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –ø–æ–Ω—è—Ç—å —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞!
      return createResponseContent(beautifulError);
    }
  });

  // üöÄ –í–û–ó–í–†–ê–©–ê–ï–ú –û–ë–™–ï–ö–¢ –°–ï–†–í–ï–†–ê –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –ú–ï–¢–û–î–ê–ú–ò
  return {
    server,

    // üî• –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–û–î–£–õ–Ø–ú–ò
    loadModulesFromDirectory,
    reloadAllModules,
    reloadSingleModule,

    // üé® –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ï–ö–û–†–ê–¢–û–†–ê–ú–ò  
    addDecorator,
    removeDecorator,
    clearDecorators,
    getActiveDecorators,

    // üìä –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    get loadedModules() { return loadedModules; },
    get allTools() { return allTools; },

    /**
     * üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
     */
    async start() {
      // üé® –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –î–ï–ö–û–†–ê–¢–û–†–´
      initializeDefaultDecorators();

      // üî• –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –ú–û–î–£–õ–ò
      initializationPromise = loadModulesFromDirectory();
      await initializationPromise;

      // üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –°–ï–†–í–ï–†
      const transport = new StdioServerTransport();
      await server.connect(transport);

      logSuccess(`üöÄ MCP Server "${name}" v${version} started with ${allTools.size} tools!`);
    }
  };
} 