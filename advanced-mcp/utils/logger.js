/**
 * üìù –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø - –ö–†–ê–°–ò–í–´–ï –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
 */

// üî• –ö–û–ù–°–¢–ê–ù–¢–´ –õ–û–ì –õ–ï–í–ï–õ–û–í
export const LOG_LEVELS = {
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS',
  INFO: 'INFO',
  DEBUG: 'DEBUG',
  ALL: 'ALL'
};

// üéØ –õ–û–ì –õ–ï–í–ï–õ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –î–õ–Ø –î–ï–ö–û–†–ê–¢–û–†–û–í - –¢–û–õ–¨–ö–û –û–®–ò–ë–ö–ò!
export const DEFAULT_LOG_LEVEL = LOG_LEVELS.ERROR;

function getCurrentTime() {
  return new Date().toLocaleTimeString('ru-RU', {
    timeZone: 'Europe/Moscow',
    hour12: false
  });
}

// üî• –ë–£–§–ï–†–ò–ó–û–í–ê–ù–ù–´–ï –õ–û–ì–ò - –ù–ï –ù–ê–†–£–®–ê–ï–ú MCP STDIO!
let logBuffer = [];

function addToBuffer(level, message) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    time: getCurrentTime(),
    level,
    message
  };

  logBuffer.push(logEntry);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
  if (logBuffer.length > 100) {
    logBuffer = logBuffer.slice(-100);
  }
}

export function logInfo(message) {
  addToBuffer('INFO', message);
  // –í development —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ console.error –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (process.env.NODE_ENV === 'development') {
    console.error(`üîµ [${getCurrentTime()}] ${message}`);
  }
}

export function logDebug(message) {
  if (process.env.DEBUG) {
    addToBuffer('DEBUG', message);
    if (process.env.NODE_ENV === 'development') {
      console.error(`üü° [${getCurrentTime()}] DEBUG: ${message}`);
    }
  }
}

export function logError(message) {
  addToBuffer('ERROR', message);
  if (process.env.NODE_ENV === 'development') {
    console.error(`üî¥ [${getCurrentTime()}] ERROR: ${message}`);
  }
}

export function logSuccess(message) {
  addToBuffer('SUCCESS', message);
  if (process.env.NODE_ENV === 'development') {
    console.error(`üü¢ [${getCurrentTime()}] SUCCESS: ${message}`);
  }
}

/**
 * üìã –ü–û–õ–£–ß–ò–¢–¨ –í–°–ï –õ–û–ì–ò –î–õ–Ø –î–ï–ö–û–†–ê–¢–û–†–ê
 */
export function getBufferedLogs() {
  return [...logBuffer];
}

/**
 * üéØ –ü–û–õ–£–ß–ò–¢–¨ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ò –ü–û –£–†–û–í–ù–Æ
 */
export function getFilteredLogs(logLevel = DEFAULT_LOG_LEVEL) {
  const logs = getBufferedLogs();

  if (logs.length === 0) {
    return [];
  }

  // üéØ –§–ò–õ–¨–¢–†–£–ï–ú –õ–û–ì–ò –ü–û –£–†–û–í–ù–Æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ ERROR!
  const filteredLogs = logs.filter(log => {
    if (logLevel === LOG_LEVELS.ERROR) return log.level === LOG_LEVELS.ERROR;
    if (logLevel === LOG_LEVELS.ALL) return true;
    if (logLevel === LOG_LEVELS.SUCCESS) return [LOG_LEVELS.ERROR, LOG_LEVELS.SUCCESS].includes(log.level);
    if (logLevel === LOG_LEVELS.INFO) return [LOG_LEVELS.ERROR, LOG_LEVELS.SUCCESS, LOG_LEVELS.INFO].includes(log.level);
    if (logLevel === LOG_LEVELS.DEBUG) return true; // DEBUG –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ
    return log.level === logLevel;
  });

  return filteredLogs;
}

/**
 * üßπ –û–ß–ò–°–¢–ò–¢–¨ –ë–£–§–ï–† –õ–û–ì–û–í
 */
export function clearBufferedLogs() {
  logBuffer.length = 0;
}

/**
 * üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö - –ü–ê–†–°–ò–ú –°–¢–ï–ö–¢–†–ï–ô–°!
 */
export function extractErrorDetails(error) {
  let details = error.message || 'Unknown error';

  if (error.stack) {
    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–µ–∫–∞ –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—à –∫–æ–¥ (–Ω–µ node_modules)
    const stackLines = error.stack.split('\n');

    for (let i = 1; i < stackLines.length; i++) {
      const line = stackLines[i].trim();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ Node.js
      if (line.includes('node_modules') || line.includes('node:') || line.includes('<anonymous>')) {
        continue;
      }

      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: at functionName (file:///path/to/file.js:line:column)
      const match = line.match(/at\s+(?:.*?\s+)?\(?(?:file:\/\/\/)?([^:]+):(\d+):(\d+)\)?/);
      if (match) {
        const [, filePath, lineNum, colNum] = match;
        const fileName = filePath.split(/[/\\]/).pop(); // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        details += ` | üìÅ ${fileName}:${lineNum}:${colNum}`;
        break;
      }

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö Unix –ø—É—Ç–µ–π
      const unixMatch = line.match(/at\s+(?:.*?\s+)?\(?(\/[^:]+):(\d+):(\d+)\)?/);
      if (unixMatch) {
        const [, filePath, lineNum, colNum] = unixMatch;
        const fileName = filePath.split('/').pop();
        details += ` | üìÅ ${fileName}:${lineNum}:${colNum}`;
        break;
      }
    }
  }

  return details;
} 